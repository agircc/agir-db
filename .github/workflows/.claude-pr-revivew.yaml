name: Claude PR Review

on:
  issue_comment:
    types: [created]

permissions:
  contents: read
  pull-requests: write
  issues: write
  id-token: write # Required for OIDC authentication

jobs:
  review:
    runs-on: ubuntu-latest
    # Only run on PR comments with /review command
    if: |
      github.event.issue.pull_request && 
      contains(github.event.comment.body, '/review')

    steps:
      - name: Get PR context
        id: pr_context
        uses: actions/github-script@v7
        with:
          script: |
            // Get PR number from comment event
            const pr_number = context.payload.issue.number;

            // Get PR details
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr_number
            });

            // Get PR diff
            const { data: diff } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr_number,
              mediaType: {
                format: 'diff'
              }
            });

            // Get changed files
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr_number
            });

            const filesList = files.map(f => `- ${f.filename} (+${f.additions}/-${f.deletions})`).join('\n');

            // Save outputs
            core.setOutput('pr_number', pr_number);
            core.setOutput('pr_title', pr.title);
            core.setOutput('pr_body', pr.body || 'No description provided');
            core.setOutput('pr_author', pr.user.login);
            core.setOutput('base_branch', pr.base.ref);
            core.setOutput('head_branch', pr.head.ref);
            core.setOutput('head_repo', pr.head.repo.full_name);
            core.setOutput('head_sha', pr.head.sha);
            core.setOutput('files_changed', filesList);

            // Save diff to file (limit to 50KB to avoid token limits)
            const fs = require('fs');
            const limitedDiff = diff.substring(0, 50000);
            fs.writeFileSync('pr_diff.txt', limitedDiff);

            return { pr_number, title: pr.title };

      - name: Get PR file contents
        id: pr_files
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const pr_number = ${{ steps.pr_context.outputs.pr_number }};
            
            // Get changed files with their content
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr_number
            });
            
            let fileContents = '';
            for (const file of files) {
              if (file.status !== 'removed' && file.filename.match(/\.(js|ts|jsx|tsx|py|java|go|rs|php|rb|cpp|c|h|css|scss|html|vue|svelte)$/)) {
                try {
                  const { data: content } = await github.rest.repos.getContent({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    path: file.filename,
                    ref: '${{ steps.pr_context.outputs.head_sha }}'
                  });
                  
                  const decodedContent = Buffer.from(content.content, 'base64').toString('utf-8');
                  fileContents += `\n\n--- File: ${file.filename} ---\n${decodedContent}`;
                } catch (error) {
                  console.log(`Could not fetch content for ${file.filename}: ${error.message}`);
                }
              }
            }
            
            // Write file contents to disk (limit to 100KB)
            const limitedContent = fileContents.substring(0, 100000);
            fs.writeFileSync('pr_files.txt', limitedContent);
            
            return { filesProcessed: files.length };

      - name: Review with Claude
        uses: anthropics/claude-code-action@beta
        id: claude_review
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          model: claude-3-5-sonnet-20240620
          direct_prompt: |
            Please review this pull request and provide comprehensive feedback.

            **PR Title:** ${{ steps.pr_context.outputs.pr_title }}

            **PR Description:**
            ${{ steps.pr_context.outputs.pr_body }}

            **Author:** ${{ steps.pr_context.outputs.pr_author }}
            **Base Branch:** ${{ steps.pr_context.outputs.base_branch }}
            **Head Branch:** ${{ steps.pr_context.outputs.head_branch }}

            **Changed Files:**
            ${{ steps.pr_context.outputs.files_changed }}

            **File Contents:**
            ```
            $(cat pr_files.txt)
            ```
            
            **Diff Content:**
            ```diff
            $(cat pr_diff.txt)
            ```

            **Instructions:**
            Please analyze the code changes and provide:

            1. **Summary** - Brief overview of what this PR does
            2. **Code Quality** - Assessment of code style, patterns, and best practices
            3. **Potential Issues** - Any bugs, edge cases, or problems you identify
            4. **Security Concerns** - Any security vulnerabilities or risks
            5. **Performance** - Performance implications of the changes
            6. **Suggestions** - Specific improvements or refactoring recommendations
            7. **Testing Plan** - Recommended tests to verify the changes work correctly

            Be constructive and specific in your feedback. Include code examples where helpful.
            Focus on the most important issues first.

      - name: Post review comment
        uses: actions/github-script@v7
        with:
          script: |
            const review = `## ðŸ¤– Claude AI Code Review

            ${{ steps.claude_review.outputs.response }}

            ---
            *This review was automatically generated by Claude AI. Consider the suggestions but use your judgment when implementing changes.*

            > ðŸ’¡ **Commands:**
            > - Reply with \`/review\` to request another review after making changes
            > - The review focuses on code quality, bugs, security, and testing`;

            // Post as PR review comment
            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ steps.pr_context.outputs.pr_number }},
              body: review,
              event: 'COMMENT'
            });

            console.log('Review posted successfully!');